package com.example.a501_10.app_class_portfolio.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.example.a501_10.app_class_portfolio.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "TRIP".
 */
@Entity(active = true)
public class Trip {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private java.util.Date created_at;

    @NotNull
    private java.util.Date updated_at;
    private String title;
    private java.util.Date start_day;
    private java.util.Date end_day;
    private Integer number_of_member;
    private Long total_money;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient TripDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "trip_id")
    })
    private List<Schedule> schedule;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Trip() {
    }

    public Trip(Long id) {
        this.id = id;
    }

    @Generated
    public Trip(Long id, java.util.Date created_at, java.util.Date updated_at, String title, java.util.Date start_day, java.util.Date end_day, Integer number_of_member, Long total_money) {
        this.id = id;
        this.created_at = created_at;
        this.updated_at = updated_at;
        this.title = title;
        this.start_day = start_day;
        this.end_day = end_day;
        this.number_of_member = number_of_member;
        this.total_money = total_money;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTripDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public java.util.Date getCreated_at() {
        return created_at;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated_at(@NotNull java.util.Date created_at) {
        this.created_at = created_at;
    }

    @NotNull
    public java.util.Date getUpdated_at() {
        return updated_at;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUpdated_at(@NotNull java.util.Date updated_at) {
        this.updated_at = updated_at;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public java.util.Date getStart_day() {
        return start_day;
    }

    public void setStart_day(java.util.Date start_day) {
        this.start_day = start_day;
    }

    public java.util.Date getEnd_day() {
        return end_day;
    }

    public void setEnd_day(java.util.Date end_day) {
        this.end_day = end_day;
    }

    public Integer getNumber_of_member() {
        return number_of_member;
    }

    public void setNumber_of_member(Integer number_of_member) {
        this.number_of_member = number_of_member;
    }

    public Long getTotal_money() {
        return total_money;
    }

    public void setTotal_money(Long total_money) {
        this.total_money = total_money;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Schedule> getSchedule() {
        if (schedule == null) {
            __throwIfDetached();
            ScheduleDao targetDao = daoSession.getScheduleDao();
            List<Schedule> scheduleNew = targetDao._queryTrip_Schedule(id);
            synchronized (this) {
                if(schedule == null) {
                    schedule = scheduleNew;
                }
            }
        }
        return schedule;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetSchedule() {
        schedule = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
