package com.example.a501_10.app_class_portfolio.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRIP".
*/
public class TripDao extends AbstractDao<Trip, Long> {

    public static final String TABLENAME = "TRIP";

    /**
     * Properties of entity Trip.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Created_at = new Property(1, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(2, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Start_day = new Property(4, java.util.Date.class, "start_day", false, "START_DAY");
        public final static Property End_day = new Property(5, java.util.Date.class, "end_day", false, "END_DAY");
        public final static Property Number_of_member = new Property(6, Integer.class, "number_of_member", false, "NUMBER_OF_MEMBER");
        public final static Property Total_money = new Property(7, Long.class, "total_money", false, "TOTAL_MONEY");
    }

    private DaoSession daoSession;


    public TripDao(DaoConfig config) {
        super(config);
    }
    
    public TripDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRIP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 1: created_at
                "\"UPDATED_AT\" INTEGER NOT NULL ," + // 2: updated_at
                "\"TITLE\" TEXT," + // 3: title
                "\"START_DAY\" INTEGER," + // 4: start_day
                "\"END_DAY\" INTEGER," + // 5: end_day
                "\"NUMBER_OF_MEMBER\" INTEGER," + // 6: number_of_member
                "\"TOTAL_MONEY\" INTEGER);"); // 7: total_money
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRIP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Trip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCreated_at().getTime());
        stmt.bindLong(3, entity.getUpdated_at().getTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        java.util.Date start_day = entity.getStart_day();
        if (start_day != null) {
            stmt.bindLong(5, start_day.getTime());
        }
 
        java.util.Date end_day = entity.getEnd_day();
        if (end_day != null) {
            stmt.bindLong(6, end_day.getTime());
        }
 
        Integer number_of_member = entity.getNumber_of_member();
        if (number_of_member != null) {
            stmt.bindLong(7, number_of_member);
        }
 
        Long total_money = entity.getTotal_money();
        if (total_money != null) {
            stmt.bindLong(8, total_money);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Trip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCreated_at().getTime());
        stmt.bindLong(3, entity.getUpdated_at().getTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        java.util.Date start_day = entity.getStart_day();
        if (start_day != null) {
            stmt.bindLong(5, start_day.getTime());
        }
 
        java.util.Date end_day = entity.getEnd_day();
        if (end_day != null) {
            stmt.bindLong(6, end_day.getTime());
        }
 
        Integer number_of_member = entity.getNumber_of_member();
        if (number_of_member != null) {
            stmt.bindLong(7, number_of_member);
        }
 
        Long total_money = entity.getTotal_money();
        if (total_money != null) {
            stmt.bindLong(8, total_money);
        }
    }

    @Override
    protected final void attachEntity(Trip entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Trip readEntity(Cursor cursor, int offset) {
        Trip entity = new Trip( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // created_at
            new java.util.Date(cursor.getLong(offset + 2)), // updated_at
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // start_day
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // end_day
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // number_of_member
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // total_money
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Trip entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreated_at(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUpdated_at(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStart_day(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setEnd_day(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setNumber_of_member(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTotal_money(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Trip entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Trip entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Trip entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
